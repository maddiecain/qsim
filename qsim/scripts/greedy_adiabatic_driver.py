import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
from qsim.codes import qubit, rydberg
from qsim import tools
from scipy.linalg import expm
import scipy.sparse as sparse
from scipy.sparse.linalg import expm_multiply
from qsim.graph_algorithms.graph import enumerate_independent_sets, independent_sets_qudit, \
    independence_polynomial, unit_disk_grid_graph
from qsim.evolution.hamiltonian import HamiltonianMIS, HamiltonianDriver
from scipy.sparse.linalg import eigsh

class HamiltonianWeightedDriver(object):
    def __init__(self, transition: tuple = (0, 1), energies: tuple = (1,), pauli='X', code=qubit,
                 graph: nx.Graph = None,
                 IS_subspace=False):
        """Default is that the first element in transition is the higher energy s."""
        self.transition = transition
        self.energies = energies
        assert pauli in ['X', 'Y', 'Z']
        self.pauli = pauli
        self.code = code
        self.graph = graph
        if self.pauli == 'X' and not self.code.logical_code:
            self._operator = np.zeros((self.code.d, self.code.d))
            self._operator[self.transition[1], self.transition[0]] = 1
            self._operator[self.transition[0], self.transition[1]] = 1
        elif self.pauli == 'Y' and not self.code.logical_code:
            self._operator = np.zeros((self.code.d, self.code.d))
            self._operator[self.transition[1], self.transition[0]] = 1j
            self._operator[self.transition[0], self.transition[1]] = -1j
        elif self.pauli == 'Z' and not self.code.logical_code:
            self._operator = np.zeros((self.code.d, self.code.d))
            self._operator[self.transition[0], self.transition[0]] = 1
            self._operator[self.transition[1], self.transition[1]] = -1
        # If a logical code, we should use the normal qubit operators because we assume the code is a qubit
        elif self.pauli == 'X' and self.code.logical_code:
            self._operator = self.code.X
        elif self.pauli == 'Y' and self.code.logical_code:
            self._operator = self.code.Y
        elif self.pauli == 'Z' and self.code.logical_code:
            self._operator = self.code.Z
        self.IS_subspace = IS_subspace

        if self.IS_subspace:
            # Generate sparse mixing Hamiltonian
            if code is not qubit:
                sets, num_sets = independent_sets_qudit(graph, self.code)
                if self.pauli == 'Z':
                    self._diagonal_hamiltonian = np.zeros((num_sets, 1))
                    for k in range(num_sets):
                        self._diagonal_hamiltonian[k, 0] = np.sum(sets[k, ...] == self.transition[0]) - np.sum(
                            sets[k, ...] == self.transition[1])

                    self._csr_hamiltonian = sparse.csr_matrix((self._diagonal_hamiltonian.T[0], (np.arange(num_sets),
                                                                                                 np.arange(num_sets))))

                    self._hamiltonian = self._csr_hamiltonian

                else:
                    # For each IS, look at spin flips generated by the laser
                    # Over-allocate space
                    rows = np.zeros(graph.number_of_nodes() * num_sets, dtype=int)
                    columns = np.zeros(graph.number_of_nodes() * num_sets, dtype=int)
                    entries = np.zeros(graph.number_of_nodes() * num_sets, dtype=int)
                    num_terms = 0
                    for i in range(num_sets):
                        for j in range(graph.number_of_nodes()):
                            if sets[i, j] == self.transition[0]:
                                # Flip spin at this location
                                # Get binary representation
                                temp = sets[i, ...].copy()
                                temp[j] = self.transition[1]
                                where_matched = (np.argwhere(np.sum(np.abs(sets - temp), axis=1) == 0).flatten())
                                if len(where_matched) > 0:
                                    # This is a valid spin flip by removing a node
                                    rows[num_terms] = where_matched[0]
                                    columns[num_terms] = i
                                    if self.pauli == 'X':
                                        entries[num_terms] = 1
                                    elif self.pauli == 'Y':
                                        # entries[num_terms] = -1j
                                        entries[num_terms] = 1j
                                    num_terms += 1
                    # Cut off the excess in the arrays
                    columns = columns[:2 * num_terms]
                    rows = rows[:2 * num_terms]
                    entries = entries[:2 * num_terms]
                    # Populate the second half of the entries according to self.pauli
                    if self.pauli == 'X':
                        columns[num_terms:2 * num_terms] = rows[:num_terms]
                        rows[num_terms:2 * num_terms] = columns[:num_terms]
                        entries[num_terms:2 * num_terms] = entries[:num_terms]
                    elif self.pauli == 'Y':
                        columns[num_terms:2 * num_terms] = rows[:num_terms]
                        rows[num_terms:2 * num_terms] = columns[:num_terms]
                        entries[num_terms:2 * num_terms] = -1 * entries[:num_terms]
                    # Now, construct the Hamiltonian
                    self._csr_hamiltonian = sparse.csr_matrix((entries, (rows, columns)), shape=(num_sets, num_sets))
                    self._hamiltonian = self._csr_hamiltonian
            else:
                # Use graph generator functions
                if self.pauli == 'Z':
                    sets = enumerate_independent_sets(graph)
                    num_sets = int(np.sum(independence_polynomial(graph)))
                    # Generate a list of integers corresponding to the independent sets in binary
                    # All ones
                    k = num_sets - 2
                    self.mis_size = 0
                    hamiltonian = np.zeros(num_sets, dtype=float)
                    hamiltonian[-1] = -1 * graph.number_of_nodes()
                    for i in sets:
                        hamiltonian[k] = len(i) - (graph.number_of_nodes() - len(i))
                        k -= 1

                    self._hamiltonian = sparse.csr_matrix(
                        (hamiltonian, (np.arange(num_sets), np.arange(num_sets))), shape=(num_sets, num_sets))

                else:
                    sets = enumerate_independent_sets(graph)
                    polynomial = independence_polynomial(graph)
                    num_sets = int(np.sum(polynomial))
                    # Generate a list of integers corresponding to the independent sets in binary
                    previous_size = 0
                    self.mis_size = 0
                    independent_sets_dict = {(): num_sets - 1}
                    rows = []
                    columns = []
                    entries = []
                    k = num_sets - 2
                    for i in sets:
                        current_size = len(i)
                        if current_size - previous_size > 1:
                            previous_size = current_size - 1
                            # Clear out the dictionary with terms we can't connect to
                            for key in list(independent_sets_dict):
                                if len(key) != previous_size:
                                    independent_sets_dict.pop(key)
                        independent_sets_dict[tuple(i)] = k
                        for (j, node) in enumerate(i):
                            i_removed = i.copy()
                            i_removed.pop(j)
                            index = independent_sets_dict[tuple(i_removed)]
                            # Index is the current independent set with a single node removed
                            rows.append(k)
                            columns.append(index)
                            rows.append(index)
                            columns.append(k)
                            if self.pauli == 'Y':
                                entries.append(-1j)
                                entries.append(1j)
                            else:
                                entries.append(self.graph.nodes[j]['weight'])
                                entries.append(self.graph.nodes[j]['weight'])
                        k -= 1
                    # Now, construct the Hamiltonian
                    self._csr_hamiltonian = sparse.csr_matrix((entries, (rows, columns)),
                                                              shape=(num_sets, num_sets))
                    self._hamiltonian = self._csr_hamiltonian
        else:
            self._hamiltonian = None
        self._left_acting_hamiltonian = None
        self._right_acting_hamiltonian = None

    @property
    def hamiltonian(self):
        if self._hamiltonian is None:
            assert not self.IS_subspace
            try:
                assert self.graph is not None
            except AssertionError:
                print('self.graph must be not None to generate the Hamiltonian property.')
            self._hamiltonian = sparse.csr_matrix(((self.code.d * self.code.n) ** self.graph.number_of_nodes(),
                                                   (self.code.d * self.code.n) ** self.graph.number_of_nodes()))
            for i in range(self.graph.number_of_nodes()):
                self._hamiltonian = self._hamiltonian + tools.tensor_product(
                    [sparse.identity((self.code.d * self.code.n) ** i),
                     self._operator,
                     sparse.identity((self.code.d * self.code.n) ** (self.graph.number_of_nodes() - i - 1))],
                    sparse=True)
        return self.energies[0] * self._hamiltonian

    @property
    def evolution_operator(self, vector_space='hilbert'):
        if vector_space != 'hilbert' and vector_space != 'liouville':
            raise Exception('Attribute vector_space must be hilbert or liouville')
        if vector_space == 'liouville':
            if self._left_acting_hamiltonian is None:
                self._left_acting_hamiltonian = sparse.kron(sparse.identity(self._hamiltonian.shape[0]),
                                                            self._hamiltonian)
                self._right_acting_hamiltonian = sparse.kron(self._hamiltonian.T,
                                                             sparse.identity(self._hamiltonian.shape[0]))

            return -1j * self.energies[0] * self._left_acting_hamiltonian + 1j * self.energies[0] * \
                   self._right_acting_hamiltonian
        else:
            return -1j * self.hamiltonian

    def left_multiply(self, state: np.ndarray):
        if not self.IS_subspace:
            temp = np.zeros_like(state)
            # For each logical qubit
            state_shape = state.shape
            for i in range(int(np.round(np.log(state.shape[0]) / np.log(self.code.d), 0))):
                if self.code.logical_code:
                    if self.pauli == 'X':
                        temp = temp + self.code.left_multiply(state, [i], ['X'])
                    elif self.pauli == 'Y':
                        temp = temp + self.code.left_multiply(state, [i], ['Y'])
                    elif self.pauli == 'Z':
                        temp = temp + self.code.left_multiply(state, [i], ['Z'])
                elif not self.code.logical_code:
                    ind = self.code.d ** i
                    out = np.zeros_like(state, dtype=np.complex128)
                    if state.is_ket:
                        state = state.reshape((-1, self.code.d, ind), order='F')
                        # Note index start from the right (sN,...,s3,s2,s1)
                        out = out.reshape((-1, self.code.d, ind), order='F')
                        if self.pauli == 'X':  # Sigma_X
                            # We want to exchange two indices
                            out[:, [self.transition[0], self.transition[1]], :] = \
                                state[:, [self.transition[1], self.transition[0]], :]
                        elif self.pauli == 'Y':  # Sigma_Y
                            out[:, [self.transition[0], self.transition[1]], :] = \
                                state[:, [self.transition[1], self.transition[0]], :]
                            out[:, self.transition[0], :] = -1j * out[:, self.transition[0], :]
                            out[:, self.transition[1], :] = 1j * out[:, self.transition[1], :]
                        elif self.pauli == 'Z':  # Sigma_Z
                            out[:, [self.transition[0], self.transition[1]], :] = \
                                state[:, [self.transition[0], self.transition[1]], :]
                            out[:, self.transition[1], :] = -1 * out[:, self.transition[1], :]
                        state = state.reshape(state_shape, order='F')
                        out = out.reshape(state_shape, order='F')
                    else:
                        out = out.reshape((-1, self.code.d, self.code.d ** (state.number_physical_qudits - 1),
                                           self.code.d, ind), order='F')
                        state = state.reshape((-1, self.code.d, self.code.d ** (state.number_physical_qudits - 1),
                                               self.code.d, ind), order='F')

                        if self.pauli == 'X':  # Sigma_X
                            out[:, [self.transition[0], self.transition[1]], :, :, :] = \
                                state[:, [self.transition[1], self.transition[0]], :, :, :]
                        elif self.pauli == 'Y':  # Sigma_Y
                            out[:, [self.transition[0], self.transition[1]], :, :, :] = \
                                state[:, [self.transition[1], self.transition[0]], :, :, :]
                            out[:, self.transition[0], :, :, :] = -1j * out[:, self.transition[0], :, :, :]
                            out[:, self.transition[1], :, :, :] = 1j * out[:, self.transition[1], :, :, :]
                        elif self.pauli == 'Z':  # Sigma_Z
                            out[:, [self.transition[0], self.transition[1]], :, :, :] = \
                                state[:, [self.transition[0], self.transition[1]], :, :, :]
                            out[:, self.transition[1], :, :, :] = -1 * out[:, self.transition[1], :, :, :]
                        state = state.reshape(state_shape, order='F')
                        out = out.reshape(state_shape, order='F')
                    temp = temp + out
            return self.energies[0] * temp
        else:
            # Handle dimensions
            if self.pauli == 'Z' and not self.code.logical_code:  # In this case, the Hamiltonian is diagonal
                return self.energies[0] * self._diagonal_hamiltonian * state
            else:
                return self.energies[0] * self._csr_hamiltonian @ state

    def right_multiply(self, state: np.ndarray):
        if state.shape[1] == 1:
            print('Warning: right multiply functionality currently applies the operator and daggers the state.')
            return self.left_multiply(state).conj().T
        if not self.IS_subspace:
            temp = np.zeros_like(state)
            # For each physical qubit
            state_shape = state.shape
            for i in range(int(np.round(np.log(state.shape[0]) / np.log(self.code.d) / self.code.n, 0))):
                if self.code.logical_code:
                    if self.pauli == 'X':
                        temp = temp + self.code.right_multiply(state, [i], ['X'])
                    elif self.pauli == 'Y':
                        temp = temp + self.code.right_multiply(state, [i], ['Y'])
                    elif self.pauli == 'Z':
                        temp = temp + self.code.right_multiply(state, [i], ['Z'])
                elif not self.code.logical_code:
                    ind = self.code.d ** i
                    out = np.zeros_like(state)
                    out = out.reshape(
                        (-1, self.code.d, self.code.d ** (state.number_physical_qudits - 1), self.code.d, ind),
                        order='F')
                    state = state.reshape(
                        (-1, self.code.d, self.code.d ** (state.number_physical_qudits - 1), self.code.d, ind),
                        order='F')
                    if self.pauli == 'X' and not self.code.logical_code:  # Sigma_X
                        out[:, :, :, [self.transition[0], self.transition[1]], :] = state[:, :, :, [self.transition[1],
                                                                                                    self.transition[0]],
                                                                                    :]
                    elif self.pauli == 'Y' and not self.code.logical_code:  # Sigma_Y
                        out[:, :, :, [self.transition[0], self.transition[1]], :] = state[:, :, :, [self.transition[1],
                                                                                                    self.transition[0]],
                                                                                    :]
                        out[:, :, :, self.transition[0], :] = -1j * out[:, :, :, self.transition[0], :]
                        out[:, :, :, self.transition[1], :] = 1j * out[:, :, :, self.transition[1], :]
                    elif self.pauli == 'Z' and not self.code.logical_code:  # Sigma_Z
                        out[:, :, :, [self.transition[0], self.transition[1]], :] = state[:, :, :, [self.transition[0],
                                                                                                    self.transition[1]],
                                                                                    :]
                        out[:, :, :, self.transition[1], :] = -1 * state[:, :, :, self.transition[1], :]
                        state = state.reshape(state_shape, order='F')
                    state = state.reshape(state_shape, order='F')
                    out = out.reshape(state_shape, order='F')
                    temp = temp + out
            return self.energies[0] * temp
        else:
            if self.pauli == 'Z' and not self.code.logical_code:  # In this case, the Hamiltonian is diagonal
                return state * self.hamiltonian.T
            else:
                return state @ self.hamiltonian.T.conj()

    def evolve(self, state: np.ndarray, time):
        r"""
        Use reshape to efficiently implement evolution under :math:`H_B=\\sum_i X_i`
        """
        if not self.IS_subspace:
            # We don't want to modify the original s
            out = state.copy()
            for i in range(int(np.round(np.log(state.shape[0]) / np.log(self.code.d), 0))):
                # Note that self._operator is not necessarily involutary
                if self.pauli == 'X':
                    out = self.code.rotation(out, [i], self.energies[0] * time, self._operator)
                elif self.pauli == 'Y':
                    out = self.code.rotation(out, [i], self.energies[0] * time, self._operator)
                elif self.pauli == 'Z':
                    out = self.code.rotation(out, [i], self.energies[0] * time, self._operator)
            return out
        else:
            if state.shape[1] == 1:
                # Handle dimensions
                if self.hamiltonian.shape[1] == 1:
                    return np.exp(-1j * time * self.hamiltonian) * state
                else:
                    return expm_multiply(-1j * time * self.hamiltonian, state)
            else:
                if self.hamiltonian.shape[1] == 1:
                    exp_hamiltonian = np.exp(-1j * time * self.hamiltonian)
                    return exp_hamiltonian * state * exp_hamiltonian.conj().T
                else:
                    exp_hamiltonian = expm(-1j * time * self.hamiltonian)
                    return exp_hamiltonian @ state @ exp_hamiltonian.conj().T


def degree_weighted(graph:nx.Graph):
    min_degree = np.inf
    for node in graph:
        if len(graph[node]) < min_degree:
            min_degree = len(graph[node])
    for node in graph:
        graph.nodes[node]['weight'] = 1/len(graph[node])*min_degree
    return graph

def degree_inverse_weighted(graph:nx.Graph):
    max_degree = 0
    for node in graph:
        if len(graph[node]) > max_degree:
            max_degree = len(graph[node])
    for node in graph:
        graph.nodes[node]['weight'] = len(graph[node])/max_degree
    return graph



def gap(graph):
    #grid = np.concatenate([np.ones(int(.8 * s ** 2)), np.zeros(s ** 2 - int(.8 * s ** 2))])
    #np.random.shuffle(grid)
    #grid = grid.reshape((s, s))
    cost = HamiltonianMIS(graph=graph, IS_subspace=True)
    driver_weighted = HamiltonianWeightedDriver(graph=degree_weighted(graph), IS_subspace=True)
    driver_inverse_weighted = HamiltonianWeightedDriver(graph=degree_inverse_weighted(graph), IS_subspace=True)
    driver_unweighted = HamiltonianDriver(graph=graph, IS_subspace=True)

    pulse = np.loadtxt('for_AWG_{}.000000.txt'.format(6))
    t_pulse_max = np.max(pulse[:, 0]) - 2 * 0.312
    print('Finished Hamiltonians')

    def schedule_exp_linear(t, T):
        if t < .312:
            driver_weighted.energies = (2 * np.pi * 2 * t / .312,)
            driver_inverse_weighted.energies = (2 * np.pi * 2 * t / .312,)
            driver_unweighted.energies = (2 * np.pi * 2 * t / .312,)
            cost.energies = (2 * np.pi * 15,)
        elif .312 <= t <= T - .312:
            driver_weighted.energies = (2 * np.pi * 2,)
            driver_inverse_weighted.energies = (2 * np.pi * 2,)
            driver_unweighted.energies = (2 * np.pi * 2,)
            cost.energies = (2 * np.pi * (-(11 + 15) / (T - 2 * .312) * (t - .312) + 15),)
        else:
            driver_weighted.energies = (2 * np.pi * 2 * (T - t) / .312,)
            driver_inverse_weighted.energies = (2 * np.pi * 2 * (T - t) / .312,)
            driver_unweighted.energies = (2 * np.pi * 2 * (T - t) / .312,)
            cost.energies = (-2 * np.pi * 11,)

    def gap(t, T):
        schedule_exp_linear(t, T)
        eigvals, eigvec = eigsh(driver_weighted.hamiltonian + cost.hamiltonian, k=4, which='SA')
        eigvals_uw, eigvec_uw = eigsh(driver_unweighted.hamiltonian + cost.hamiltonian, k=4, which='SA')
        eigvals_iw, eigvec_iw = eigsh(driver_inverse_weighted.hamiltonian + cost.hamiltonian, k=4, which='SA')
        print(t/t_pulse_max, (eigvals-eigvals[0]), (eigvals_uw-eigvals_uw[0]), (eigvals_iw-eigvals_iw[0]))
        return eigvals, eigvals_uw, eigvals_iw

    for t in np.linspace(.59, .638, 15):
        eigvals, eigvals_uw, eigvals_iw = gap(t*t_pulse_max, t_pulse_max)
        plt.scatter(np.ones_like(eigvals)*t, eigvals-eigvals[0], color='navy')
        plt.scatter(np.ones_like(eigvals_uw) * t, eigvals_uw - eigvals_uw[0], color='red')
        plt.scatter(np.ones_like(eigvals_iw) * t, eigvals_iw - eigvals_iw[0], color='goldenrod')
    plt.show()


def plot_gap_comparison():
    indices_7 = np.array([189, 623, 354, 40, 323, 173, 661, 345, 813, 35, 162, 965, 336,
                          667, 870, 1, 156, 901, 576, 346])
    # Make gap versus time for index 11
    # Index 13 is missing
    gaps_w = [3.07369267, 0.7997628786946791, 2.1675841082177953, 2.1253520369009493, 4.309313368845096, 2.2317719264289337,
              0.5193467104457454, 2.299485250760398, 1.2479513064002674, 2.21549904, 1.21399118531275, 1.9420168483179054,
              2.840399814459488, 1.32231326, 3.92540512, 2.080244206261966, 3.118883101700476, 2.0192117362381126,
              2.662482302170957, 4.540769230744644]
    gaps_uw = [4.56936324001083, 2.6145769634239855, 3.8546449021378635, 3.2976290309781575, 7.6352054367060305,
               3.047684688475499, 4.235761318318964, 4.73206514036724, 5.548418035039845, 4.916611855574843,
               4.083427945869687, 4.527584097629926, 5.661544183688875, np.nan, 4.744154990219442, 6.396735466018242,
               6.29724196992748, 4.786929435072295, 4.4903107014519605, 5.3712550200274904]
    gaps_uw = [4.540475532206926, 2.5962464057099055, 3.791400840772212, 3.2823958497687045, 7.61270615882205,
         2.985803086834892, 4.229070246544325, 4.729398079830389, 5.48824186638393, 4.914594522153266,
         4.049635008459461, 4.508709780217259, 5.655959812129765, 5.651419961222871, 4.674079725691058,
         6.396142420017668, 6.263203536870094, 4.78611564972357, 4.4851563016854925, 5.368011667861197]
    gaps_iw = [2.7957177190187394, 1.002581659191634, 1.9497817620639921, 0.5819694723383861, 4.54188055, 1.1076250014139077,
               4.12203255, 2.9258664394723723, 3.058463974880965, 2.331162241511933, 2.1157606582937944, 2.145586095388637,
               3.175439273882546, 3.0595218, 1.2268509520877018, 1.7052730446500846, 2.072969740148323, 2.7920897302073513,
               1.016325451284473, 2.105973087228051]

    rescaling_iw = [1.4857142857142858, 1.452127659574468, 1.6595744680851063, 1.6082474226804124, 1.5, 1.5, 1.6082474226804124, 1.467741935483871, 1.5918367346938775, 1.6082474226804124, 1.5757575757575757, 1.5757575757575757, 1.6595744680851063, 1.625, 1.5445544554455446, 1.6774193548387097, 1.471698113207547, 1.5757575757575757, 1.5445544554455446, 1.6082474226804124]
    rescaling_w = [2.379430563625798, 2.112458086149084, 2.0858270724563854, 2.178481181008112, 2.351083680206688, 1.6435881998795903, 4.152617568766635, 2.149606299212598, 2.2352620087336237, 4.084278768233387, 2.313559322033898, 2.2928331466965277, 2.151017728168089, 4.233652106487464, 2.213513513513513, 3.8217452169855344, 1.621621621621621, 4.143688337971159, 2.3561565017261206, 2.254645560908465]
    gaps_w = np.array(gaps_w)*np.array(rescaling_w)/(2*np.pi*2)
    gaps_iw = np.array(gaps_iw)*np.array(rescaling_iw)/(2*np.pi*2)
    gaps_uw = np.array(gaps_uw)/(2*np.pi*2)
    print(len(gaps_w),len(gaps_iw),len(gaps_uw))
    ratios = np.load('ordered_ratios_max.npy')[0, :len(indices_7)]
    plt.bar(np.arange(len(gaps_w)), gaps_w, color='red', label='Inverse degree weighted')
    plt.bar(np.arange(len(gaps_iw))+len(gaps_w), gaps_iw, color='maroon', label='Degree weighted')
    plt.bar(np.arange(len(gaps_uw))+len(gaps_w)+len(gaps_iw), gaps_uw, color='black', label='Unweighted')
    where_x = np.arange(len(gaps_w)+len(gaps_iw)+len(gaps_uw))[np.isnan(np.concatenate([gaps_w, gaps_iw, gaps_uw]))]
    #plt.bar(where_x, np.ones_like(where_x)*11/(2*np.pi*2), color='lightgrey', label='No data')
    plt.ylim(0, 11/(2*np.pi*2))
    plt.xlabel('Graph number')
    plt.ylabel('Minimum spectral gap')
    plt.legend(frameon=True, loc='upper right')
    plt.show()

    plt.bar(np.arange(len(gaps_w)), (gaps_w-gaps_uw)/gaps_uw, color='red', label='Inverse degree weighted')
    plt.bar(np.arange(len(gaps_iw)) + len(gaps_w), (gaps_iw-gaps_uw)/gaps_uw, color='maroon', label='Degree weighted')
    #plt.bar(np.arange(len(gaps_uw)) + len(gaps_w) + len(gaps_iw), gaps_uw, color='black',
    #        label='Unweighted')
    where_x = np.arange(len(gaps_w) + len(gaps_iw))[np.isnan(np.concatenate([gaps_w, gaps_iw]))]
    #plt.bar(where_x, np.ones_like(where_x) * 13 / (2 * np.pi * 2), color='lightgrey', label='No data')
    plt.ylim(- 13 / (2 * np.pi * 2), 13 / (2 * np.pi * 2))
    plt.xlabel('Graph number')
    plt.ylabel('(Gap - UW gap)/UW gap')
    plt.legend(frameon=True, loc='upper right')
    plt.show()

def compute_rescaling():
    indices_7 = np.array([189, 623, 354, 40, 323, 173, 661, 345, 813, 35, 162, 965, 336,
                         667, 870, 1, 156, 901, 576, 346])
    n = 7
    rescaling_iw = []
    rescaling_w = []
    for i in range(len(indices_7)):
        index = indices_7[i]
        degeneracy = np.loadtxt('configurations/mis_degeneracy_L%d.dat' % n)[index, 1].astype(int)
        graph_mask = np.reshape(np.loadtxt('configurations/mis_degeneracy_L%d.dat' % n)[index, 3:],
                                (n, n), order='F')[::-1, ::-1].T.astype(bool)
        graph = unit_disk_grid_graph(graph_mask, visualize=False)
        to_remove = []
        for node in graph:
            if len(graph[node]) == 0:
                to_remove.append(node)
        for node in to_remove:
            graph.remove_node(node)
        graph = nx.relabel_nodes(graph, {node: i for (i, node) in enumerate(graph.nodes)})
        max_degree = 0
        min_degree = np.inf
        total_degree = 0
        total_inv_degree = 0
        size = int(n**2*.8)
        for node in graph:
            degree = len(graph[node])

            if degree > max_degree:
                max_degree = degree
            if degree < min_degree:
                min_degree = degree
            total_degree += degree
            total_inv_degree += 1/degree
        rescaling_iw.append(max_degree*size/total_degree)
        rescaling_w.append(size/min_degree/total_inv_degree)

        print(rescaling_iw)
        print(rescaling_w)
#compute_rescaling()


def gap_weighted(graph):
    #grid = np.concatenate([np.ones(int(.8 * s ** 2)), np.zeros(s ** 2 - int(.8 * s ** 2))])
    #np.random.shuffle(grid)
    #grid = grid.reshape((s, s))
    cost = HamiltonianMIS(graph=graph, IS_subspace=True)
    driver_weighted = HamiltonianWeightedDriver(graph=degree_weighted(graph), IS_subspace=True)
    driver_inverse_weighted = HamiltonianWeightedDriver(graph=degree_inverse_weighted(graph), IS_subspace=True)

    pulse = np.loadtxt('for_AWG_{}.000000.txt'.format(6))
    t_pulse_max = np.max(pulse[:, 0]) - 2 * 0.312
    print('Finished Hamiltonians')

    def schedule_exp_linear(t, T):
        if t < .312:
            driver_weighted.energies = (2 * np.pi * 2 * t / .312,)
            driver_inverse_weighted.energies = (2 * np.pi * 2 * t / .312,)
            cost.energies = (2 * np.pi * 15,)
        elif .312 <= t <= T - .312:
            driver_weighted.energies = (2 * np.pi * 2,)
            driver_inverse_weighted.energies = (2 * np.pi * 2,)
            cost.energies = (2 * np.pi * (-(11 + 15) / (T - 2 * .312) * (t - .312) + 15),)
        else:
            driver_weighted.energies = (2 * np.pi * 2 * (T - t) / .312,)
            driver_inverse_weighted.energies = (2 * np.pi * 2 * (T - t) / .312,)
            cost.energies = (-2 * np.pi * 11,)

    def gap(t, T):
        schedule_exp_linear(t, T)
        eigvals, eigvec = eigsh(driver_weighted.hamiltonian + cost.hamiltonian, k=4, which='SA')
        eigvals_iw, eigvec_iw = eigsh(driver_inverse_weighted.hamiltonian + cost.hamiltonian, k=4, which='SA')
        print(t/t_pulse_max, (eigvals-eigvals[0]), (eigvals_iw-eigvals_iw[0]))
        return eigvals, eigvals_iw

    for t in np.linspace(.40, .90, 50):
        eigvals, eigvals_iw = gap(t*t_pulse_max, t_pulse_max)
        plt.scatter(np.ones_like(eigvals)*t, eigvals-eigvals[0], color='navy')
        plt.scatter(np.ones_like(eigvals_iw) * t, eigvals_iw - eigvals_iw[0], color='goldenrod')
    plt.show()


plot_gap_comparison()
if __name__ == '__main__':
    import sys
    i = int(sys.argv[1])
    indices_7 = np.array([189, 623, 354, 40, 323, 173, 661, 345, 813, 35, 162, 965, 336,
                              667, 870, 1, 156, 901, 576, 346])
    n = 7
    index = indices_7[i]
    degeneracy = np.loadtxt('configurations/mis_degeneracy_L%d.dat' % n)[index, 1].astype(int)
    graph_mask = np.reshape(np.loadtxt('configurations/mis_degeneracy_L%d.dat' % n)[index, 3:],
                                (n, n), order='F')[::-1, ::-1].T.astype(bool)
    graph = unit_disk_grid_graph(graph_mask, visualize=False)
    # Remove free nodes
    to_remove = []
    for node in graph:
        if len(graph[node]) == 0:
            to_remove.append(node)
    for node in to_remove:
        graph.remove_node(node)
    graph = nx.relabel_nodes(graph, {node: i for (i, node) in enumerate(graph.nodes)})
    #nx.draw(graph)
    #plt.show()
    gap_weighted(graph)



